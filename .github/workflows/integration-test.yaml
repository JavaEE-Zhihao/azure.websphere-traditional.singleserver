name: integration-test
on:
  workflow_dispatch:
    inputs:
      databaseType:
        description: 'Database connection'
        required: true
        default: 'db2'
        type: choice
        options:
        - db2
        - none
      deleteAzureResources:
        description: 'Delete Azure resources at the end'
        required: true
        type: boolean
        default: true
  # Allows you to run this workflow using GitHub APIs
  # PERSONAL_ACCESS_TOKEN=<GITHUB_PERSONAL_ACCESS_TOKEN>
  # REPO_NAME=WASdev/azure.websphere-traditional.singleserver
  # Enable IBM DB2 database connection and delete Azure resources at the end
  # curl --verbose -XPOST -u "WASdev:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/actions/workflows/integration-test.yaml/dispatches --data '{"ref": "main"}'
  # Enable IBM DB2 database connection and keep Azure resources at the end
  # curl --verbose -XPOST -u "WASdev:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/actions/workflows/integration-test.yaml/dispatches --data '{"ref": "main", "inputs":{"deleteAzureResources": "false"}}'
  # Disable IBM DB2 database connection and delete Azure resources at the end
  # curl --verbose -XPOST -u "WASdev:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/actions/workflows/integration-test.yaml/dispatches --data '{"ref": "main", "inputs":{"databaseType": "none"}}'
  # Disable IBM DB2 database connection and keep Azure resources at the end
  # curl --verbose -XPOST -u "WASdev:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/actions/workflows/integration-test.yaml/dispatches --data '{"ref": "main", "inputs":{"databaseType": "none", "deleteAzureResources": "false"}}'
  repository_dispatch:
    types: [integration-test]
  # sample request
  # PERSONAL_ACCESS_TOKEN=<GITHUB_PERSONAL_ACCESS_TOKEN>
  # REPO_NAME=WASdev/azure.websphere-traditional.singleserver
  # Enable IBM DB2 database connection and delete Azure resources at the end
  # curl --verbose -X POST https://api.github.com/repos/${REPO_NAME}/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" --data '{"event_type": "integration-test", "client_payload": {"databaseType": "db2", "deleteAzureResources": true}}'
  # Enable IBM DB2 database connection and keep Azure resources at the end
  # curl --verbose -X POST https://api.github.com/repos/${REPO_NAME}/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" --data '{"event_type": "integration-test", "client_payload": {"databaseType": "db2", "deleteAzureResources": false}}'
  # Disable IBM DB2 database connection and delete Azure resources at the end
  # curl --verbose -X POST https://api.github.com/repos/${REPO_NAME}/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" --data '{"event_type": "integration-test", "client_payload": {"databaseType": "none", "deleteAzureResources": true}}'
  # Disable IBM DB2 database connection and keep Azure resources at the end
  # curl --verbose -X POST https://api.github.com/repos/${REPO_NAME}/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" --data '{"event_type": "integration-test", "client_payload": {"databaseType": "none", "deleteAzureResources": false}}'
env:
  # Latest version is at https://github.com/Azure/azure-cli/releases
  azCliVersion: 2.40.0
  # Commit hash from https://github.com/Azure/arm-ttk/commits/master
  refArmttk: b98c03608a20bbee4f2061b23bdeece1c2d214b8
  # Commit hash from https://github.com/Azure/azure-javaee-iaas/commits/main
  refJavaee: f25ab89a2a8848da39b84e5d6c927f4c4cb47200
  bicepVersion: v0.11.1
  repoName: "azure.websphere-traditional.singleserver"
  azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
  userName: ${{ secrets.USER_NAME }}
  msTeamsWebhook: ${{ secrets.MSTEAMS_WEBHOOK }}
  vmAdminId: ${{ secrets.VM_ADMIN_ID }}
  vmAdminPassword: ${{ secrets.VM_ADMIN_PASSWORD }}
  db2VmName: db2${{ github.run_id }}${{ github.run_number }}
  db2inst1Password: ${{ secrets.DB2INST1_PASSWORD }}
  testResourceGroup: twasSingleTestRG${{ github.run_id }}${{ github.run_number }}
  testDeploymentName: twasSingleTestDeployment${{ github.run_id }}${{ github.run_number }}
  location: eastus
  scriptLocation: https://raw.githubusercontent.com/${{ secrets.USER_NAME }}/azure.websphere-traditional.singleserver/$GITHUB_REF_NAME/test/
jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up bicep
        run: |
          curl -Lo bicep https://github.com/Azure/bicep/releases/download/${{ env.bicepVersion }}/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          bicep --version
      - name: Checkout azure-javaee-iaas
        uses: actions/checkout@v2
        with:
          repository: Azure/azure-javaee-iaas
          path: azure-javaee-iaas
          ref: ${{ env.refJavaee }}
      - name: Checkout arm-ttk
        uses: actions/checkout@v2
        with:
          repository: Azure/arm-ttk
          path: arm-ttk
          ref: ${{ env.refArmttk }}
      - name: Checkout ${{ env.repoName }}
        uses: actions/checkout@v2
        with:
          path: ${{ env.repoName }}
          ref: ${{ github.event.inputs.ref }}
      - name: Build azure-javaee-iaas
        run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Deploy an IBM DB2 server on Azure VM
        if: ${{ inputs.databaseType == 'db2' || github.event.client_payload.databaseType == 'db2' }}
        run: |
          az group create -n ${{ env.testResourceGroup }} -l ${{ env.location }}
          az vm create \
            --resource-group ${{ env.testResourceGroup }} --name ${{ env.db2VmName }} \
            --image "Canonical:UbuntuServer:18.04-LTS:latest" \
            --admin-username azureuser --generate-ssh-keys \
            --nsg-rule NONE --enable-agent true \
            --vnet-name ${{ env.db2VmName }}VNET --enable-auto-update false \
            --tags SkipASMAzSecPack=true SkipNRMSCorp=true SkipNRMSDatabricks=true SkipNRMSDB=true SkipNRMSHigh=true SkipNRMSMedium=true SkipNRMSRDPSSH=true SkipNRMSSAW=true SkipNRMSMgmt=true
          az vm open-port -g ${{ env.testResourceGroup }} -n ${{ env.db2VmName }} --port 50000 --priority 100
          az vm extension set --name CustomScript \
            --extension-instance-name install-db2-in-docker \
            --resource-group ${{ env.testResourceGroup }} --vm-name ${{ env.db2VmName }} \
            --publisher Microsoft.Azure.Extensions --version 2.0 \
            --settings "{\"fileUris\": [\"${{ env.scriptLocation }}install-db2.sh\"]}" \
            --protected-settings "{\"commandToExecute\":\"bash install-db2.sh ${{ env.db2inst1Password }}\"}"          
      - name: Build ${{ env.repoName }}
        run: |
          cd ${{ env.repoName }}
          if ${{ inputs.databaseType == 'db2' || github.event.client_payload.databaseType == 'db2' }}; then
            db2VmPublicIP=$(az vm show \
              --resource-group ${{ env.testResourceGroup }} --name ${{ env.db2VmName }} \
              --show-details --query publicIps -o tsv)
            mvn -Dgit.repo=${{ env.userName }} -Dgit.tag=$GITHUB_REF_NAME -DuseTrial=true \
              -DvmSize=Standard_D2_v3 -DdnsLabelPrefix=was \
              -DadminUsername=${{ env.vmAdminId }} -DadminPasswordOrKey=${{ env.vmAdminPassword }} \
              -DauthenticationType=password -DwasUsername=${{ env.vmAdminId }} -DwasPassword=${{ env.vmAdminPassword }} \
              -DenableDB=true -DdatabaseType=db2 -DjdbcDataSourceJNDIName=jdbc/Sample -DdsConnectionURL=jdbc:db2://${db2VmPublicIP}:50000/sample -DdbUser=db2inst1 -DdbPassword=${{ env.db2inst1Password }} \
              -Dtest.args="-Test All" -Pbicep -Passembly -Ptemplate-validation-tests clean install
          else
            mvn -Dgit.repo=${{ env.userName }} -Dgit.tag=$GITHUB_REF_NAME -DuseTrial=true \
              -DvmSize=Standard_D2_v3 -DdnsLabelPrefix=was \
              -DadminUsername=${{ env.vmAdminId }} -DadminPasswordOrKey=${{ env.vmAdminPassword }} \
              -DauthenticationType=password -DwasUsername=${{ env.vmAdminId }} -DwasPassword=${{ env.vmAdminPassword }} \
              -DenableDB=false -DdatabaseType=db2 \
              -Dtest.args="-Test All" -Pbicep -Passembly -Ptemplate-validation-tests clean install
          fi
      - name: Deploy a twas-single server on Azure VM
        run: |
          cd ${{ env.repoName }}/target/cli
          chmod a+x deploy.azcli
          ./deploy.azcli -n ${{ env.testDeploymentName }} -g ${{ env.testResourceGroup }} -l ${{ env.location }}
      - name: Verify the deployment
        run: |
          outputs=$(az deployment group show -n ${{ env.testDeploymentName }} -g ${{ env.testResourceGroup }} --query 'properties.outputs')
          adminSecuredConsole=$(echo $outputs | jq -r '.adminSecuredConsole.value')
          curl $adminSecuredConsole -k
          if [[ $? -ne 0 ]]; then
            echo "Failed to access ${adminSecuredConsole}."
            exit 1
          fi
          hitCountServletUrl=$(echo $outputs | jq -r '.hitCountServletUrl.value')
          curl $hitCountServletUrl -k
          if [[ $? -ne 0 ]]; then
            echo "Failed to access ${hitCountServletUrl}."
            exit 1
          fi
          snoopServletUrl=$(echo $outputs | jq -r '.snoopServletUrl.value')
          curl $snoopServletUrl -k
          if [[ $? -ne 0 ]]; then
            echo "Failed to access ${snoopServletUrl}."
            exit 1
          fi
      - name: Delete all Azure resources
        id: delete-resources-in-group
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.deleteAzureResources) || (github.event_name == 'repository_dispatch' && github.event.client_payload.deleteAzureResources) }}
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            az group delete -n ${{ env.testResourceGroup }} --yes
      - name: Generate artifact file name and path
        id: artifact_file
        run: |
          version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' ${{ env.repoName }}/pom.xml)
          artifactName=${{ env.repoName }}-$version-arm-assembly
          unzip ${{ env.repoName }}/target/$artifactName.zip -d ${{ env.repoName }}/target/$artifactName
          echo "##[set-output name=artifactName;]${artifactName}"
          echo "##[set-output name=artifactPath;]${{ env.repoName }}/target/$artifactName"
      - name: Archive ${{ env.repoName }} template
        uses: actions/upload-artifact@v1
        if: success()
        with:
          name: ${{steps.artifact_file.outputs.artifactName}}
          path: ${{steps.artifact_file.outputs.artifactPath}}
  notification:
    needs: integration-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Output inputs from workflow_dispatch
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Output client_payload from repository_dispatch
        run: echo "${{ toJSON(github.event.client_payload) }}"
      - name: Send notification
        if: ${{ env.msTeamsWebhook != 'NA' }}
        run: |
            workflowJobs=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.userName }}/${{ env.repoName }}/actions/runs/${{ github.run_id }}/jobs)
            successIntegrationTestJob=$(echo $workflowJobs | jq '.jobs | map(select(.name=="integration-test" and .conclusion=="success")) | length')
            if (($successIntegrationTestJob == 0));then
                echo "Job integration-test failed, send notification to Teams"
                curl ${{ env.msTeamsWebhook }} \
                -H 'Content-Type: application/json' \
                --data-binary @- << EOF
                {
                "@context":"http://schema.org/extensions",
                "@type":"MessageCard",
                "text":"Workflow integration-test of repo ${{ env.repoName }} failed, please take a look at: https://github.com/${{ env.userName }}/${{ env.repoName }}/actions/runs/${{ github.run_id }}"
                }
            EOF
            else
                echo "Job integration-test succeeded."
            fi
